------FORM TRIGGER --------------------
	
	:GLOBAL.V_USER_ID_CHOOSEN :=0;
DECLARE 
	USERNAME_CHOSEN BOOLEAN; 
BEGIN 
	SET_WINDOW_PROPERTY(FORMS_MDI_WINDOW,WINDOW_STATE,MAXIMIZE);
	
	IF :GLOBAL.V_USER_ID_CHOOSEN = 0 THEN
		USERNAME_CHOSEN := Show_Lov('LOV_USERS'); 
		IF NOT USERNAME_CHOSEN THEN
			 Message('íÌÈ ÅÎÊíÇÑ ãÓÊÎÏã.'); 
			 Message('íÌÈ ÅÎÊíÇÑ ãÓÊÎÏã.'); 
			Bell; 
			RAISE Form_Trigger_Failure; 
		ELSE
			IF CHECK_NEW_USER(:GLOBAL.V_USER_ID_CHOOSEN) = TRUE THEN
				INSERT_USER_ID_TO_BLOCK(:GLOBAL.V_USER_ID_CHOOSEN);
				INSERT_FORM_ID_TO_BLOCK;
				MESSAGE(:GLOBAL.V_USER_ID_CHOOSEN);
			ELSE
				MESSAGE(:BLK_USERS.CMBX_USER);
			END IF;
		END IF;
	END IF;
END;
---------------------BTN OF BLK_USER---------------------
DECLARE 
	USERNAME_CHOSEN BOOLEAN; 
BEGIN 
	USERNAME_CHOSEN := Show_Lov('LOV_USERS'); 
	IF NOT USERNAME_CHOSEN THEN Message('íÌÈ ÅÎÊíÇÑ ãÓÊÎÏã.'); 
		Bell; 
		RAISE Form_Trigger_Failure; 
	END IF;
END;




--------------PROGRAM UNIT-------------------------------------

PROCEDURE CHKBX_CHAENGED IS
BEGIN
	IF :SYSTEM.CURSOR_VALUE = 'TRUE' THEN
		ENABLE_CHKBX(:SYSTEM.CURRENT_ITEM);
	ELSE
		DISABLE_CHKBX(:SYSTEM.CURRENT_ITEM);
	END IF;
END;


PROCEDURE DISABLE_CHKBX (FORM_NAME VARCHAR) IS
BEGIN
  SET_ITEM_PROPERTY(FORM_NAME||'.VIEW_PERMISSION' ,ENABLED,PROPERTY_FALSE);
  SET_ITEM_PROPERTY(FORM_NAME||'.ADD_PERMISSION' ,ENABLED,PROPERTY_FALSE);
  SET_ITEM_PROPERTY(FORM_NAME||'.EDIT_PERMISSION' ,ENABLED,PROPERTY_FALSE);
  SET_ITEM_PROPERTY(FORM_NAME||'.DELETE_PERMISSION' ,ENABLED,PROPERTY_FALSE);
END;

PROCEDURE ENABLE_CHKBX (FORM_NAME VARCHAR) IS
BEGIN
  SET_ITEM_PROPERTY(FORM_NAME||'.VIEW_PERMISSION' ,ENABLED,PROPERTY_TRUE);
  SET_ITEM_PROPERTY(FORM_NAME||'.ADD_PERMISSION' ,ENABLED,PROPERTY_TRUE);
  SET_ITEM_PROPERTY(FORM_NAME||'.EDIT_PERMISSION' ,ENABLED,PROPERTY_TRUE);
  SET_ITEM_PROPERTY(FORM_NAME||'.DELETE_PERMISSION' ,ENABLED,PROPERTY_TRUE);
END;

FUNCTION GET_FORM_ID (P_FORM_NAME VARCHAR2)  RETURN NUMBER IS
V_FORM_ID NUMBER;
BEGIN
  SELECT FORMS.FORM_ID INTO V_FORM_ID FROM FORMS WHERE FORMS.FORM_NAME_EN = P_FORM_NAME ;
  
EXCEPTION WHEN NO_DATA_FOUND THEN 
	NULL;
  RETURN V_FORM_ID;
END;


PROCEDURE INSERT_FORM_ID_TO_BLOCK IS
BEGIN
  :USERS_FORM.FORM_ID := GET_FORM_ID('USERS_FORM') ;
  :PERMISSIONS_FORM.FORM_ID := GET_FORM_ID('PERMISSIONS_FORM') ;
  :PRODUCTS_FORM.FORM_ID := GET_FORM_ID('PRODUCTS_FORM') ;
  :GROUPS_FORM.FORM_ID := GET_FORM_ID('GROUPS_FORM') ;
  :CUSTOMERS_FORM.FORM_ID := GET_FORM_ID('CUSTOMERS_FORM') ;
  :SUPPLIERS_FORM.FORM_ID := GET_FORM_ID('SUPPLIERS_FORM') ;
  :SALES_FORM.FORM_ID := GET_FORM_ID('SALES_FORM') ;
  :PURCHASES_FORM.FORM_ID := GET_FORM_ID('PURCHASES_FORM') ;
  :REPORTS_FORM.FORM_ID := GET_FORM_ID('REPORTS_FORM') ;
END;



PROCEDURE INSERT_USER_ID_TO_BLOCK (P_USER_ID NUMBER) IS
BEGIN
  :USERS_FORM.USER_ID := P_USER_ID ;
  :PERMISSIONS_FORM.USER_ID := P_USER_ID ;
  :PRODUCTS_FORM.USER_ID := P_USER_ID ;
  :GROUPS_FORM.USER_ID := P_USER_ID ;
  :CUSTOMERS_FORM.USER_ID := P_USER_ID ;
  :SUPPLIERS_FORM.USER_ID := P_USER_ID ;
  :SALES_FORM.USER_ID := P_USER_ID ;
  :PURCHASES_FORM.USER_ID := P_USER_ID ;
  :REPORTS_FORM.USER_ID := P_USER_ID ;
END;